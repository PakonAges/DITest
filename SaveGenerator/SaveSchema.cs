// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace DITest.Save
{

using global::System;
using global::FlatBuffers;

public enum CubesCollection : byte
{
 NONE = 0,
 CubeData = 1,
};

public struct Vec3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Vec3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Vec3> CreateVec3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Vec3>(builder.Offset);
  }
};

public struct PlayerData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PlayerData GetRootAsPlayerData(ByteBuffer _bb) { return GetRootAsPlayerData(_bb, new PlayerData()); }
  public static PlayerData GetRootAsPlayerData(ByteBuffer _bb, PlayerData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PlayerData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Sessions { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string Date { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDateBytes() { return __p.__vector_as_arraysegment(6); }
  public CubeData? Cubes(int j) { int o = __p.__offset(8); return o != 0 ? (CubeData?)(new CubeData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CubesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PlayerData> CreatePlayerData(FlatBufferBuilder builder,
      short sessions = 0,
      StringOffset dateOffset = default(StringOffset),
      VectorOffset cubesOffset = default(VectorOffset)) {
    builder.StartObject(3);
    PlayerData.AddCubes(builder, cubesOffset);
    PlayerData.AddDate(builder, dateOffset);
    PlayerData.AddSessions(builder, sessions);
    return PlayerData.EndPlayerData(builder);
  }

  public static void StartPlayerData(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddSessions(FlatBufferBuilder builder, short sessions) { builder.AddShort(0, sessions, 0); }
  public static void AddDate(FlatBufferBuilder builder, StringOffset dateOffset) { builder.AddOffset(1, dateOffset.Value, 0); }
  public static void AddCubes(FlatBufferBuilder builder, VectorOffset cubesOffset) { builder.AddOffset(2, cubesOffset.Value, 0); }
  public static VectorOffset CreateCubesVector(FlatBufferBuilder builder, Offset<CubeData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCubesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PlayerData> EndPlayerData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PlayerData>(o);
  }
  public static void FinishPlayerDataBuffer(FlatBufferBuilder builder, Offset<PlayerData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlayerDataBuffer(FlatBufferBuilder builder, Offset<PlayerData> offset) { builder.FinishSizePrefixed(offset.Value); }
};

public struct CubeData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CubeData GetRootAsCubeData(ByteBuffer _bb) { return GetRootAsCubeData(_bb, new CubeData()); }
  public static CubeData GetRootAsCubeData(ByteBuffer _bb, CubeData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CubeData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vec3? Position { get { int o = __p.__offset(4); return o != 0 ? (Vec3?)(new Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Scale { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public short Scr { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static void StartCubeData(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vec3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(1, scale, 0.0f); }
  public static void AddScr(FlatBufferBuilder builder, short scr) { builder.AddShort(2, scr, 0); }
  public static Offset<CubeData> EndCubeData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CubeData>(o);
  }
};


}
